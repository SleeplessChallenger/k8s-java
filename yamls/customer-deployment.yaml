apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-java-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: customer-java-deploy
      tier: backend
  template:
    metadata:
      labels: # these 4 are all labels
        app: customer-java-deploy # RS from selector will be tied to each pod with this label associated with it
        environment: test # just to specify which environment is used (QA, production etc)
        tier: backend
        department: engineering
    spec:
      containers:
        - name: customer-java-deploy
          image: "enoshima/springboot-k8s-customer:latest"
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: JAVA_OPTS
              value: "-Dorder.msa_host=10.103.24.91 -Dorder.msa_port=8085" # this is Service name and Service outbound port
          ports:
            - containerPort: 8091 # this one should match PORT of the app server

---
apiVersion: v1
kind: Service
metadata:
  name: customer-java-node
spec:
  type: NodePort # it makes this service available on all nodes
  selector:
    app: customer-java-deploy # need to match name of the pod from labels
    tier: backend
  ports:
    - port: 8089
      targetPort: 8091
      nodePort: 30003 # opens up port on all nodes. It will accept incoming request and then forward to port (8089 in our case)

---
apiVersion: v1
kind: Service
metadata:
  name: customer-java-cluster-ip
spec:
  type: ClusterIP
  selector:
    app: customer-java-deploy # need to match name of the pod from labels
  ports:
    - port: 8089
      targetPort: 8091

---
apiVersion: v1
kind: Service
metadata:
  name: customer-java-cluster-ip
spec:
  type: LoadBalancer
  selector:
    app: customer-java-deploy # need to match name of the pod from labels
  ports:
    - port: 8099
      targetPort: 8091